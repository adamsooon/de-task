{"version":3,"sources":["components/ProfileForm.js","contants/menuItems.js","logo.svg","components/NavBar.js","components/Footer.js","components/Profile.js","App.js","reportWebVitals.js","index.js"],"names":["ProfileForm","useState","isAvatarModalOpen","setIsAvatarModalOpen","isAvatarLoading","setIsAvatarLoading","imagePreviewSourceViaFileAPI","setImagePreviewSourceViaViaFileAPI","toggleIsAvatarOpen","isOpen","className","Form","onSubmit","formState","console","log","formProps","Field","isRequired","label","name","fieldProps","placeholder","minimumRows","defaultValue","DatePicker","AvatarItem","avatar","Avatar","presence","src","primaryText","appearance","onClick","onImagePicked","selectedImage","file","URL","createObjectURL","onCancel","isLoading","FormFooter","type","menuList","path","NavBar","isLargeScreen","useMediaQuery","query","logo","alt","map","item","to","DropdownMenu","trigger","triggerType","DropdownItemGroup","DropdownItem","Footer","Profile","App","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34333a9e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Button from \"@atlaskit/button\";\nimport Form, { Field, FormFooter, HelperMessage } from \"@atlaskit/form\";\nimport { DatePicker } from \"@atlaskit/datetime-picker\";\nimport Textfield from \"@atlaskit/textfield\";\nimport TextArea from \"@atlaskit/textarea\";\nimport Avatar, { AvatarItem } from \"@atlaskit/avatar\";\nimport { AvatarPickerDialog } from \"@atlaskit/media-avatar-picker\";\nimport { ModalTransition } from \"@atlaskit/modal-dialog\";\n\nfunction ProfileForm() {\n  const [isAvatarModalOpen, setIsAvatarModalOpen] = useState(false);\n  const [isAvatarLoading, setIsAvatarLoading] = useState(false);\n  const [imagePreviewSourceViaFileAPI, setImagePreviewSourceViaViaFileAPI] =\n    useState(\"\");\n  const toggleIsAvatarOpen = () => {\n    setIsAvatarModalOpen((isOpen) => !isOpen);\n  };\n\n  const handleImagePicked = (file) => {\n    setIsAvatarLoading(true);\n    setImagePreviewSourceViaViaFileAPI(URL.createObjectURL(file));\n    toggleIsAvatarOpen();\n    setIsAvatarLoading(false);\n  };\n\n  return (\n    <div className=\"container\">\n      <Form onSubmit={(formState) => console.log(\"form submitted\", formState)}>\n        {({ formProps }) => (\n          <form {...formProps}>\n            <h1 className=\"header-main\">Profile form</h1>\n            <Field isRequired label=\"First name\" name=\"firstName\">\n              {({ fieldProps }) => (\n                <>\n                  <Textfield\n                    placeholder=\"Enter your first name\"\n                    {...fieldProps}\n                  />\n                  <HelperMessage>\n                    Help or instruction text goes here\n                  </HelperMessage>\n                </>\n              )}\n            </Field>\n            <Field isRequired label=\"Last name\" name=\"lastName\">\n              {({ fieldProps }) => (\n                <>\n                  <Textfield\n                    placeholder=\"Enter your last name\"\n                    {...fieldProps}\n                  />\n                  <HelperMessage>\n                    Help or instruction text goes here\n                  </HelperMessage>\n                </>\n              )}\n            </Field>\n            <Field isRequired label=\"Email\" name=\"email\">\n              {({ fieldProps }) => (\n                <>\n                  <Textfield placeholder=\"Enter your e-mail\" {...fieldProps} />\n                  <HelperMessage>\n                    Help or instruction text goes here\n                  </HelperMessage>\n                </>\n              )}\n            </Field>\n            <Field isRequired label=\"Phone number\" name=\"phone\">\n              {({ fieldProps }) => (\n                <>\n                  <Textfield\n                    placeholder=\"Enter your phone number\"\n                    {...fieldProps}\n                  />\n                  <HelperMessage>\n                    Help or instruction text goes here\n                  </HelperMessage>\n                </>\n              )}\n            </Field>\n            <Field isRequired label=\"About\" name=\"about\">\n              {({ fieldProps }) => (\n                <>\n                  <TextArea\n                    placeholder=\"Type something about you\"\n                    minimumRows={3}\n                    {...fieldProps}\n                  />\n                  <HelperMessage>\n                    Help or instruction text goes here\n                  </HelperMessage>\n                </>\n              )}\n            </Field>\n            <Field name=\"birthday\" label=\"Birthday\" isRequired defaultValue=\"\">\n              {({ fieldProps }) => (\n                <>\n                  <DatePicker {...fieldProps} />\n                  <HelperMessage>\n                    Help or instruction text goes here\n                  </HelperMessage>\n                </>\n              )}\n            </Field>\n            {imagePreviewSourceViaFileAPI && (\n              <AvatarItem\n                avatar={\n                  <Avatar\n                    presence=\"online\"\n                    src={imagePreviewSourceViaFileAPI}\n                  />\n                }\n                primaryText=\"Mike Cannon-Brookes\"\n              />\n            )}\n            <Button appearance=\"primary\" onClick={toggleIsAvatarOpen}>\n              {!!imagePreviewSourceViaFileAPI\n                ? \"Change Avatar\"\n                : \"Upload Avatar\"}\n            </Button>\n            <ModalTransition>\n              {!!isAvatarModalOpen && (\n                <AvatarPickerDialog\n                  onImagePicked={(selectedImage) => {\n                    handleImagePicked(selectedImage);\n                  }}\n                  onCancel={toggleIsAvatarOpen}\n                  isLoading={isAvatarLoading}\n                />\n              )}\n            </ModalTransition>\n\n            <FormFooter>\n              <Button type=\"submit\" appearance=\"primary\">\n                Submit\n              </Button>\n            </FormFooter>\n          </form>\n        )}\n      </Form>\n    </div>\n  );\n}\n\nexport default ProfileForm;\n","const menuList = [{ name: \"Home\", path: \"\" }];\n\nexport default menuList;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMediaQuery } from \"react-responsive\";\nimport DropdownMenu, {\n  DropdownItem,\n  DropdownItemGroup,\n} from \"@atlaskit/dropdown-menu\";\nimport menuList from \"../contants/menuItems\";\nimport logo from \"../logo.svg\";\n\nexport default function NavBar() {\n  const isLargeScreen = useMediaQuery({ query: \"(min-width: 1024px)\" });\n  return (\n    <nav className=\"navbar\">\n      <div className=\"container navbar-container\">\n        <figure className=\"navbar-logo\">\n          <img src={logo} alt=\"logo\" />\n        </figure>\n\n        {isLargeScreen ? (\n          <ul className=\"navbar-list\">\n            {menuList.map((item) => (\n              <li className=\"navbar-list-item\" key={item.name}>\n                <Link to={item.path}>{item.name}</Link>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <DropdownMenu trigger=\"Menu\" triggerType=\"button\">\n            <DropdownItemGroup>\n              {menuList.map((item) => (\n                <DropdownItem key={item.name}>\n                  <Link className=\"navbar-dropdown-item\" to={item.path}>\n                    {item.name}\n                  </Link>\n                </DropdownItem>\n              ))}\n            </DropdownItemGroup>\n          </DropdownMenu>\n        )}\n      </div>\n    </nav>\n  );\n}\n","export default function Footer() {\n  return (\n    <footer className=\"footer\">\n      <div className=\"container\">\n        <p>\n          Lorem Ipsum is simply dummy text of the printing and typesetting\n          industry. Lorem Ipsum has been the industry's standard dummy text ever\n          since the 1500s, when an unknown printer took a galley of type and\n          scrambled it to make a type specimen book.\n        </p>\n      </div>\n    </footer>\n  );\n}\n","import React from \"react\";\n\nfunction Profile() {\n  return (\n    <div className=\"container-small\">\n      <div className=\"profile-item\">\n        <span className=\"profile-item-label\">First Name:</span>\n        <span>John</span>\n      </div>\n      <div className=\"profile-item\">\n        <span className=\"profile-item-label\">Last Name:</span>\n        <span>John</span>\n      </div>\n      <div className=\"profile-item\">\n        <span className=\"profile-item-label\">Email:</span>\n        <span>John@op.pl</span>\n      </div>\n      <div className=\"profile-item\">\n        <span className=\"profile-item-label\">Phone:</span>\n        <span>John</span>\n      </div>\n      <div className=\"profile-item\">\n        <span className=\"profile-item-label\">Birthday:</span>\n        <span>John</span>\n      </div>\n      <div className=\"profile-item\">\n        <span className=\"profile-item-label\">About:</span>\n        <span>John About About About</span>\n      </div>\n    </div>\n  );\n}\n\nexport default Profile;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport ProfileForm from \"./components/ProfileForm\";\nimport NavBar from \"./components/NavBar\";\nimport Footer from \"./components/Footer\";\nimport Profile from \"./components/Profile\";\n\nexport default function App() {\n  return (\n    <Router>\n      <>\n        <NavBar />\n\n        <Switch>\n          <Route exact path=\"/\">\n            <ProfileForm />\n          </Route>\n          <Route path=\"/profile/:profileId\">\n            <Profile />\n          </Route>\n        </Switch>\n        <Footer />\n      </>\n    </Router>\n  );\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"@atlaskit/css-reset\";\nimport \"./styles/index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}