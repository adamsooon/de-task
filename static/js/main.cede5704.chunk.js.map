{"version":3,"sources":["components/AvatarUploadComponent.js","contants/regexes.js","utils/formValidator.js","components/ProfileForm.js","contants/menuItems.js","logo.svg","components/NavBar.js","components/Footer.js","components/Profile.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["AvatarUploadComponent","imagePreviewSourceViaFileAPI","handleSetImagePreviewSourceViaViaFileAPI","useState","isAvatarModalOpen","setIsAvatarModalOpen","isAvatarLoading","setIsAvatarLoading","toggleIsAvatarOpen","isOpen","AvatarItem","avatar","Avatar","presence","src","size","appearance","className","onClick","onImagePicked","selectedImage","file","URL","createObjectURL","onCancel","isLoading","NAME_REGEX","PHONE_REGEX","EMAIL_REGEX","formValidator","field","value","test","ProfileForm","isFormSending","setIsFormSending","setImagePreviewSourceViaViaFileAPI","history","useHistory","Form","onSubmit","formState","formData","fetch","method","body","JSON","stringify","then","response","json","data","push","catch","e","console","log","finally","formProps","Field","isRequired","label","name","validate","fieldProps","error","placeholder","minimumRows","DatePicker","FormFooter","type","menuList","path","NavBar","isLargeScreen","useMediaQuery","query","logo","alt","map","item","to","DropdownMenu","trigger","triggerType","DropdownItemGroup","DropdownItem","Footer","Profile","profileData","setProfileData","setIsLoading","profileId","useParams","useEffect","profile","firstName","lastName","email","phone","birthday","about","App","exact","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","reload","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.cede5704.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"@atlaskit/button\";\nimport Avatar, { AvatarItem } from \"@atlaskit/avatar\";\nimport { AvatarPickerDialog } from \"@atlaskit/media-avatar-picker\";\nimport { ModalTransition } from \"@atlaskit/modal-dialog\";\n\nfunction AvatarUploadComponent({\n  imagePreviewSourceViaFileAPI,\n  handleSetImagePreviewSourceViaViaFileAPI,\n}) {\n  const [isAvatarModalOpen, setIsAvatarModalOpen] = useState(false);\n  const [isAvatarLoading, setIsAvatarLoading] = useState(false);\n  const toggleIsAvatarOpen = () => {\n    setIsAvatarModalOpen((isOpen) => !isOpen);\n  };\n\n  const handleImagePicked = (file) => {\n    setIsAvatarLoading(true);\n    handleSetImagePreviewSourceViaViaFileAPI(URL.createObjectURL(file));\n    toggleIsAvatarOpen();\n    setIsAvatarLoading(false);\n  };\n\n  return (\n    <>\n      {imagePreviewSourceViaFileAPI && (\n        <AvatarItem\n          avatar={\n            <Avatar\n              presence=\"online\"\n              src={imagePreviewSourceViaFileAPI}\n              size=\"xxlarge\"\n            />\n          }\n        />\n      )}\n      <Button\n        appearance=\"primary\"\n        className=\"upload-button\"\n        onClick={toggleIsAvatarOpen}\n      >\n        {!!imagePreviewSourceViaFileAPI ? \"Change Avatar\" : \"Upload Avatar\"}\n      </Button>\n      <ModalTransition>\n        {!!isAvatarModalOpen && (\n          <AvatarPickerDialog\n            onImagePicked={(selectedImage) => {\n              handleImagePicked(selectedImage);\n            }}\n            onCancel={toggleIsAvatarOpen}\n            isLoading={isAvatarLoading}\n          />\n        )}\n      </ModalTransition>\n    </>\n  );\n}\n\nAvatarUploadComponent.propTypes = {\n  imagePreviewSourceViaFileAPI: PropTypes.string.isRequired,\n  handleSetImagePreviewSourceViaViaFileAPI: PropTypes.func.isRequired,\n};\n\nexport default AvatarUploadComponent;\n","export const NAME_REGEX = /^[a-zA-Z ]+$/;\nexport const PHONE_REGEX = /^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\\\s\\\\./0-9]*$/;\nexport const EMAIL_REGEX = /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/;\n","import { EMAIL_REGEX, NAME_REGEX, PHONE_REGEX } from \"../contants/regexes\";\n\nexport default function formValidator(field, value) {\n  switch (field) {\n    case \"name\":\n      if (!NAME_REGEX.test(value)) {\n        return \"INCORRECT\";\n      }\n      return undefined;\n    case \"phone\":\n      if (!PHONE_REGEX.test(value)) {\n        return \"INCORRECT\";\n      }\n      return undefined;\n    case \"email\":\n      if (!EMAIL_REGEX.test(value)) {\n        return \"INCORRECT\";\n      }\n      return undefined;\n    case \"birthday\":\n    case \"about\":\n      if (!value) {\n        return \"INCORRECT\";\n      }\n      return undefined;\n\n    default:\n      return undefined;\n  }\n}\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Form, { Field, FormFooter, ErrorMessage } from \"@atlaskit/form\";\nimport { DatePicker } from \"@atlaskit/datetime-picker\";\nimport { LoadingButton } from \"@atlaskit/button\";\nimport Textfield from \"@atlaskit/textfield\";\nimport TextArea from \"@atlaskit/textarea\";\nimport AvatarUploadComponent from \"./AvatarUploadComponent\";\nimport formValidator from \"../utils/formValidator\";\n\nfunction ProfileForm() {\n  const [isFormSending, setIsFormSending] = useState(false);\n  const [imagePreviewSourceViaFileAPI, setImagePreviewSourceViaViaFileAPI] =\n    useState(\"\");\n  const history = useHistory();\n\n  const handleSave = (formData) => {\n    setIsFormSending(true);\n    fetch(\"apis/add\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        ...formData,\n        avatar: imagePreviewSourceViaFileAPI,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => history.push(`/ds-task/profile/${data}`))\n      .catch((e) => {\n        // invoke some snackbar with error message here;\n        console.log(e);\n      })\n      .finally(() => setIsFormSending(false));\n  };\n\n  return (\n    <div className=\"container\">\n      <Form onSubmit={(formState) => handleSave(formState)}>\n        {({ formProps }) => (\n          <form {...formProps}>\n            <h1 className=\"header-main\">Profile form</h1>\n            <Field\n              isRequired\n              label=\"First name\"\n              name=\"firstName\"\n              validate={(value) => formValidator(\"name\", value)}\n            >\n              {({ fieldProps, error }) => (\n                <>\n                  <Textfield\n                    placeholder=\"Enter your first name\"\n                    {...fieldProps}\n                  />\n                  {error && (\n                    <ErrorMessage>\n                      First name must contains only letters from a-z\n                    </ErrorMessage>\n                  )}\n                </>\n              )}\n            </Field>\n            <Field\n              isRequired\n              label=\"Last name\"\n              name=\"lastName\"\n              validate={(value) => formValidator(\"name\", value)}\n            >\n              {({ fieldProps, error }) => (\n                <>\n                  <Textfield\n                    placeholder=\"Enter your last name\"\n                    {...fieldProps}\n                  />\n                  {error && (\n                    <ErrorMessage>\n                      Last name must contains only letters from a-z\n                    </ErrorMessage>\n                  )}\n                </>\n              )}\n            </Field>\n            <Field\n              isRequired\n              label=\"Email\"\n              name=\"email\"\n              validate={(value) => formValidator(\"email\", value)}\n            >\n              {({ fieldProps, error }) => (\n                <>\n                  <Textfield placeholder=\"Enter your e-mail\" {...fieldProps} />\n                  {error && <ErrorMessage>Invalid e-mail</ErrorMessage>}\n                </>\n              )}\n            </Field>\n            <Field\n              isRequired\n              label=\"Phone number\"\n              name=\"phone\"\n              validate={(value) => formValidator(\"phone\", value)}\n            >\n              {({ fieldProps, error }) => (\n                <>\n                  <Textfield\n                    placeholder=\"Enter your phone number\"\n                    {...fieldProps}\n                  />\n                  {error && <ErrorMessage>Invalid phone number </ErrorMessage>}\n                </>\n              )}\n            </Field>\n            <Field\n              isRequired\n              label=\"About\"\n              name=\"about\"\n              validate={(value) => formValidator(\"about\", value)}\n            >\n              {({ fieldProps, error }) => (\n                <>\n                  <TextArea\n                    placeholder=\"Type something about you\"\n                    minimumRows={3}\n                    {...fieldProps}\n                  />\n                  {error && <ErrorMessage>This field is required</ErrorMessage>}\n                </>\n              )}\n            </Field>\n            <Field\n              name=\"birthday\"\n              label=\"Birthday\"\n              isRequired\n              validate={(value) => formValidator(\"birthday\", value)}\n            >\n              {({ fieldProps, error }) => (\n                <>\n                  <DatePicker\n                    {...fieldProps}\n                    placeholder=\"Pick your birthday\"\n                  />\n                  {error && <ErrorMessage>Pick your birthday</ErrorMessage>}\n                </>\n              )}\n            </Field>\n            <AvatarUploadComponent\n              handleSetImagePreviewSourceViaViaFileAPI={\n                setImagePreviewSourceViaViaFileAPI\n              }\n              imagePreviewSourceViaFileAPI={imagePreviewSourceViaFileAPI}\n            />\n\n            <FormFooter>\n              <LoadingButton\n                type=\"submit\"\n                appearance=\"primary\"\n                isLoading={isFormSending}\n              >\n                Submit\n              </LoadingButton>\n            </FormFooter>\n          </form>\n        )}\n      </Form>\n    </div>\n  );\n}\n\nexport default ProfileForm;\n","const menuList = [{ name: \"Home\", path: \"\" }];\n\nexport default menuList;\n","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMediaQuery } from \"react-responsive\";\nimport DropdownMenu, {\n  DropdownItem,\n  DropdownItemGroup,\n} from \"@atlaskit/dropdown-menu\";\nimport menuList from \"../contants/menuItems\";\nimport logo from \"../logo.svg\";\n\nexport default function NavBar() {\n  const isLargeScreen = useMediaQuery({ query: \"(min-width: 1024px)\" });\n  return (\n    <nav className=\"navbar\">\n      <div className=\"container navbar-container\">\n        <figure className=\"navbar-logo\">\n          <img src={logo} alt=\"logo\" />\n        </figure>\n\n        {isLargeScreen ? (\n          <ul className=\"navbar-list\">\n            {menuList.map((item) => (\n              <li className=\"navbar-list-item\" key={item.name}>\n                <Link to={item.path}>{item.name}</Link>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <DropdownMenu trigger=\"Menu\" triggerType=\"button\">\n            <DropdownItemGroup>\n              {menuList.map((item) => (\n                <DropdownItem key={item.name}>\n                  <Link className=\"navbar-dropdown-item\" to={item.path}>\n                    {item.name}\n                  </Link>\n                </DropdownItem>\n              ))}\n            </DropdownItemGroup>\n          </DropdownMenu>\n        )}\n      </div>\n    </nav>\n  );\n}\n","export default function Footer() {\n  return (\n    <footer className=\"footer\">\n      <div className=\"container\">\n        <p>\n          Lorem Ipsum is simply dummy text of the printing and typesetting\n          industry. Lorem Ipsum has been the industry's standard dummy text ever\n          since the 1500s, when an unknown printer took a galley of type and\n          scrambled it to make a type specimen book.\n        </p>\n      </div>\n    </footer>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Avatar, { AvatarItem } from \"@atlaskit/avatar\";\nimport Spinner from \"@atlaskit/spinner\";\n\nfunction Profile() {\n  const [profileData, setProfileData] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const { profileId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetch(`/apis/profile/${profileId}`)\n      .then((response) => response.json())\n      .then((data) => {\n        setProfileData(data.profile);\n      })\n      .catch((e) => {\n        console.log(e);\n        // invoke some snackbar with error message here;\n      })\n      .finally(() => setIsLoading(false));\n  }, [profileId]);\n\n  if (isLoading) {\n    return (\n      <div className=\"spinner-box\">\n        <Spinner appearance=\"inherit\" size=\"xlarge\" />\n      </div>\n    );\n  }\n  return (\n    <div className=\"profile\">\n      <div className=\"profile-avatar\">\n        <AvatarItem\n          avatar={\n            <Avatar\n              presence=\"online\"\n              src={profileData?.avatar}\n              size=\"xxlarge\"\n            />\n          }\n        />\n      </div>\n      <div className=\"profile-data\">\n        <div className=\"profile-item\">\n          <span className=\"profile-item-label\">First Name:</span>\n          <span>{profileData?.firstName}</span>\n        </div>\n        <div className=\"profile-item\">\n          <span className=\"profile-item-label\">Last Name:</span>\n          <span>{profileData?.lastName}</span>\n        </div>\n        <div className=\"profile-item\">\n          <span className=\"profile-item-label\">Email:</span>\n          <span>{profileData?.email}</span>\n        </div>\n        <div className=\"profile-item\">\n          <span className=\"profile-item-label\">Phone:</span>\n          <span>{profileData?.phone}</span>\n        </div>\n        <div className=\"profile-item\">\n          <span className=\"profile-item-label\">Birthday:</span>\n          <span>{profileData?.birthday}</span>\n        </div>\n        <div className=\"profile-item\">\n          <span className=\"profile-item-label\">About:</span>\n          <span>{profileData?.about}</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Profile;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport ProfileForm from \"./components/ProfileForm\";\nimport NavBar from \"./components/NavBar\";\nimport Footer from \"./components/Footer\";\nimport Profile from \"./components/Profile\";\n\nexport default function App() {\n  return (\n    <Router>\n      <>\n        <NavBar />\n\n        <Switch>\n          <Route exact path=\"/\">\n            <ProfileForm />\n          </Route>\n          <Route exact path=\"/ds-task\">\n            <ProfileForm />\n          </Route>\n          <Route path=\"/ds-task/profile/:profileId\">\n            <Profile />\n          </Route>\n        </Switch>\n        <Footer />\n      </>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n              return window.location.reload();\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"@atlaskit/css-reset\";\nimport \"./styles/index.scss\";\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}